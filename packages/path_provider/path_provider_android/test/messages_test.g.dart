// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v3.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis
// ignore_for_file: avoid_relative_lib_imports
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;
import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

// The following line is edited by hand to avoid confusing dart with overloaded types.
import 'package:path_provider_android/messages.g.dart';

class _TestPathProviderApiCodec extends StandardMessageCodec {
  const _TestPathProviderApiCodec();
}

abstract class TestPathProviderApi {
  static const MessageCodec<Object?> codec = _TestPathProviderApiCodec();

  String? getTemporaryPath();
  String? getApplicationSupportPath();
  String? getApplicationDocumentsPath();
  String? getExternalStoragePath();
  List<String?> getExternalCachePaths();
  List<String?> getExternalStoragePaths(StorageDirectory directory);
  static void setup(TestPathProviderApi? api,
      {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PathProviderApi.getTemporaryPath', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          final String? output = api.getTemporaryPath();
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PathProviderApi.getApplicationSupportPath', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          final String? output = api.getApplicationSupportPath();
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PathProviderApi.getApplicationDocumentsPath',
          codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          final String? output = api.getApplicationDocumentsPath();
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PathProviderApi.getExternalStoragePath', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          final String? output = api.getExternalStoragePath();
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PathProviderApi.getExternalCachePaths', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          // ignore message
          final List<String?> output = api.getExternalCachePaths();
          return <Object?, Object?>{'result': output};
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.PathProviderApi.getExternalStoragePaths', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
              'Argument for dev.flutter.pigeon.PathProviderApi.getExternalStoragePaths was null.');
          final List<Object?> args = (message as List<Object?>?)!;

          /// TODO(gaaclarke): The following line was tweaked by hand to address
          /// https://github.com/flutter/flutter/issues/105742.  Alternatively
          /// the tests could be written with a mock BinaryMessenger but this is
          /// how we want to address it eventually.
          final StorageDirectory? arg_directory =
              StorageDirectory.values[args[0] as int];
          assert(arg_directory != null,
              'Argument for dev.flutter.pigeon.PathProviderApi.getExternalStoragePaths was null, expected non-null StorageDirectory.');
          final List<String?> output =
              api.getExternalStoragePaths(arg_directory!);
          return <Object?, Object?>{'result': output};
        });
      }
    }
  }
}
